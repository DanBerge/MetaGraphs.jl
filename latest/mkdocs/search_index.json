{
    "docs": [
        {
            "location": "/", 
            "text": "MetaGraphs\n\n\n \n \n\n\nLightGraphs.jl\n graphs with arbitrary metadata.\n\n\n\n\nDocumentation\n\n\nFull documentation is available at \nGitHub Pages\n. Documentation for methods is also available via the Julia REPL help system.\n\n\n\n\nInstallation\n\n\nInstallation is straightforward:\n\n\njulia\n Pkg.add(\nMetaGraphs\n)\n\n\n\n\n\n\nExample Usage\n\n\njulia\n using LightGraphs, MetaGraphs\n\n# create a standard simplegraph\njulia\n g = PathGraph(5)\n{5, 4} undirected simple Int64 graph\n\n# create a metagraph based on the simplegraph, with optional default edgeweight\njulia\n mg = MetaGraph(g, 3.0)\n{5, 4} undirected Int64 metagraph with Float64 weights defined by :weight (default weight 3.0)\n\n# set some properties for the graph itself\njulia\n set_prop!(mg, :description, \nThis is a metagraph.\n)\nDict{Symbol,Any} with 1 entry:\n  :description =\n \nThis is a metagraph.\n\n\n# set properties on a vertex in bulk\njulia\n set_props!(mg, 1, Dict(:name=\nSusan\n, :id =\n 123))\nDict{Symbol,Any} with 2 entries:\n  :id   =\n 123\n  :name =\n \nSusan\n\n\n# set individual properties\njulia\n set_prop!(mg, 2, :name, \nJohn\n)\nDict{Symbol,String} with 1 entry:\n  :name =\n \nJohn\n\n\n# set a property on an edge\njulia\n set_prop!(mg, Edge(1, 2), :action, \nknows\n)\nDict{Symbol,String} with 1 entry:\n  :action =\n \nknows\n\n\n# set another property on an edge by specifying source and destination\njulia\n set_prop!(mg, 1, 2, :since, Date(\n20170501\n, \nyyyymmdd\n))\nDict{Symbol,Any} with 2 entries:\n  :since   =\n 2017-05-01\n  :action =\n \nknows\n\n\n# get all the properties for an element\njulia\n props(mg, 1)\nDict{Symbol,Any} with 2 entries:\n  :id   =\n 123\n  :name =\n \nSusan\n\n\n# get a specific property by name\njulia\n get_prop(mg, 2, :name)\n\nJohn\n\n\n# delete a specific property\njulia\n rem_prop!(mg, 1, :name)\nDict{Symbol,Any} with 1 entry:\n  :id =\n 123\n\n# clear all properties for vertex 2\njulia\n clear_props!(mg, 2)\nDict{Symbol,Any} with 0 entries\n\n# confirm there are no properties set for vertex 2\njulia\n props(mg, 2)\nDict{Symbol,Any} with 0 entries\n\n# all LightGraphs analytics work\njulia\n betweenness_centrality(mg)\n5-element Array{Float64,1}:\n 0.0\n 0.5\n 0.666667\n 0.5\n 0.0\n\n# using weights\njulia\n mg = MetaGraph(CompleteGraph(3))\n{3, 3} undirected Int64 metagraph with Float64 weights defined by :weight (default weight 1.0)\n\njulia\n enumerate_paths(dijkstra_shortest_paths(mg, 1), 3)\n2-element Array{Int64,1}:\n 1\n 3\n\njulia\n set_prop!(mg, 1, 2, :weight, 0.2)\nDict{Symbol,Float64} with 1 entry:\n  :weight =\n 0.2\n\njulia\n set_prop!(mg, 2, 3, :weight, 0.6)\nDict{Symbol,Float64} with 1 entry:\n  :weight =\n 0.6\n\njulia\n enumerate_paths(dijkstra_shortest_paths(mg, 1), 3)\n3-element Array{Int64,1}:\n 1\n 2\n 3", 
            "title": "Home"
        }, 
        {
            "location": "/#metagraphs", 
            "text": "LightGraphs.jl  graphs with arbitrary metadata.", 
            "title": "MetaGraphs"
        }, 
        {
            "location": "/#documentation", 
            "text": "Full documentation is available at  GitHub Pages . Documentation for methods is also available via the Julia REPL help system.", 
            "title": "Documentation"
        }, 
        {
            "location": "/#installation", 
            "text": "Installation is straightforward:  julia  Pkg.add( MetaGraphs )", 
            "title": "Installation"
        }, 
        {
            "location": "/#example-usage", 
            "text": "julia  using LightGraphs, MetaGraphs\n\n# create a standard simplegraph\njulia  g = PathGraph(5)\n{5, 4} undirected simple Int64 graph\n\n# create a metagraph based on the simplegraph, with optional default edgeweight\njulia  mg = MetaGraph(g, 3.0)\n{5, 4} undirected Int64 metagraph with Float64 weights defined by :weight (default weight 3.0)\n\n# set some properties for the graph itself\njulia  set_prop!(mg, :description,  This is a metagraph. )\nDict{Symbol,Any} with 1 entry:\n  :description =   This is a metagraph. \n\n# set properties on a vertex in bulk\njulia  set_props!(mg, 1, Dict(:name= Susan , :id =  123))\nDict{Symbol,Any} with 2 entries:\n  :id   =  123\n  :name =   Susan \n\n# set individual properties\njulia  set_prop!(mg, 2, :name,  John )\nDict{Symbol,String} with 1 entry:\n  :name =   John \n\n# set a property on an edge\njulia  set_prop!(mg, Edge(1, 2), :action,  knows )\nDict{Symbol,String} with 1 entry:\n  :action =   knows \n\n# set another property on an edge by specifying source and destination\njulia  set_prop!(mg, 1, 2, :since, Date( 20170501 ,  yyyymmdd ))\nDict{Symbol,Any} with 2 entries:\n  :since   =  2017-05-01\n  :action =   knows \n\n# get all the properties for an element\njulia  props(mg, 1)\nDict{Symbol,Any} with 2 entries:\n  :id   =  123\n  :name =   Susan \n\n# get a specific property by name\njulia  get_prop(mg, 2, :name) John \n\n# delete a specific property\njulia  rem_prop!(mg, 1, :name)\nDict{Symbol,Any} with 1 entry:\n  :id =  123\n\n# clear all properties for vertex 2\njulia  clear_props!(mg, 2)\nDict{Symbol,Any} with 0 entries\n\n# confirm there are no properties set for vertex 2\njulia  props(mg, 2)\nDict{Symbol,Any} with 0 entries\n\n# all LightGraphs analytics work\njulia  betweenness_centrality(mg)\n5-element Array{Float64,1}:\n 0.0\n 0.5\n 0.666667\n 0.5\n 0.0\n\n# using weights\njulia  mg = MetaGraph(CompleteGraph(3))\n{3, 3} undirected Int64 metagraph with Float64 weights defined by :weight (default weight 1.0)\n\njulia  enumerate_paths(dijkstra_shortest_paths(mg, 1), 3)\n2-element Array{Int64,1}:\n 1\n 3\n\njulia  set_prop!(mg, 1, 2, :weight, 0.2)\nDict{Symbol,Float64} with 1 entry:\n  :weight =  0.2\n\njulia  set_prop!(mg, 2, 3, :weight, 0.6)\nDict{Symbol,Float64} with 1 entry:\n  :weight =  0.6\n\njulia  enumerate_paths(dijkstra_shortest_paths(mg, 1), 3)\n3-element Array{Int64,1}:\n 1\n 2\n 3", 
            "title": "Example Usage"
        }, 
        {
            "location": "/metagraphs/", 
            "text": "MetaGraphs\n\n\nMetadata for graphs is stored as a series of named key-value pairs, with the key being an instance of type \nSymbol\n and the value being any type. The following methods are available for MetaGraphs:\n\n\n#\n\n\nMetaGraphs.clear_props!\n \n \nMethod\n.\n\n\nclear_props!(g)\nclear_props!(g, v)\nclear_props!(g, e)\nclear_props!(g, s, d)\n\n\n\n\nRemove all defined properties from graph \ng\n, vertex \nv\n, or edge \ne\n (optionally referenced by source vertex \ns\n and destination vertex \nd\n).\n\n\nsource\n\n\n#\n\n\nMetaGraphs.defaultweight!\n \n \nMethod\n.\n\n\ndefaultweight!(g, weight)\n\n\n\n\nSet the default weight for metagraph \ng\n\n\nsource\n\n\n#\n\n\nMetaGraphs.defaultweight\n \n \nMethod\n.\n\n\ndefaultweight(g)\n\n\n\n\nReturn the default weight for metagraph \ng\n.\n\n\nsource\n\n\n#\n\n\nMetaGraphs.filter_edges\n \n \nMethod\n.\n\n\nfilter_edges(g, prop[, val])\nfilter_edges(g, fn)\n\n\n\n\nReturn an iterator to all edges that have property \nprop\n defined (optionally as \nval\n, or where function \nfn\n returns \ntrue\n only for edges that should be included in the iterator).\n\n\nfn\n should be of the form\n\n\nfn(g::AbstractMetaGraph, e::AbstractEdge)::Boolean\n\n\n\n\nwhere \ne\n is replaced with the edge being evaluated.\n\n\nsource\n\n\n#\n\n\nMetaGraphs.filter_vertices\n \n \nMethod\n.\n\n\nfilter_vertices(g, prop[, val])\nfilter_vertices(g, fn)\n\n\n\n\nReturn an iterator to all vertices that have property \nprop\n defined (optionally as \nval\n, or where function \nfn\n returns \ntrue\n only for vertices that should be included in the iterator).\n\n\nfn\n should be of the form\n\n\nfn(g::AbstractMetaGraph, v::Integer)::Boolean\n\n\n\n\nwhere \nv\n is replaced with the vertex being evaluated.\n\n\nsource\n\n\n#\n\n\nMetaGraphs.get_prop\n \n \nMethod\n.\n\n\nget_prop(g, prop)\nget_prop(g, v, prop)\nget_prop(g, e, prop)\nget_prop(g, s, d, prop)\n\n\n\n\nReturn the property \nprop\n defined for graph \ng\n, vertex \nv\n, or edge \ne\n (optionally referenced by source vertex \ns\n and destination vertex \nd\n). If property is not defined, return an error.\n\n\nsource\n\n\n#\n\n\nMetaGraphs.has_prop\n \n \nMethod\n.\n\n\nhas_prop(g, prop)\nhas_prop(g, v, prop)\nhas_prop(g, e, prop)\nhas_prop(g, s, d, prop)\n\n\n\n\nReturn true if the property \nprop\n is defined for graph \ng\n, vertex \nv\n, or edge \ne\n (optionally referenced by source vertex \ns\n and destination vertex \nd\n).\n\n\nsource\n\n\n#\n\n\nMetaGraphs.props\n \n \nMethod\n.\n\n\nprops(g)\nprops(g, v)\nprops(g, e)\nprops(g, s, d)\n\n\n\n\nReturn a dictionary of all metadata from graph \ng\n, vertex \nv\n, or edge \ne\n (optionally referenced by source vertex \ns\n and destination vertex \nd\n).\n\n\nsource\n\n\n#\n\n\nMetaGraphs.rem_prop!\n \n \nMethod\n.\n\n\nrem_prop!(g, prop)\nrem_prop!(g, v, prop)\nrem_prop!(g, e, prop)\nrem_prop!(g, s, d, prop)\n\n\n\n\nRemove property \nprop\n from graph \ng\n, vertex \nv\n, or edge \ne\n (optionally referenced by source vertex \ns\n and destination vertex \nd\n). If property does not exist, will not do anything.\n\n\nsource\n\n\n#\n\n\nMetaGraphs.set_prop!\n \n \nMethod\n.\n\n\nset_prop!(g, prop, val)\nset_prop!(g, v, prop, val)\nset_prop!(g, e, prop, val)\nset_prop!(g, s, d, prop, val)\n\n\n\n\nSet (replace) property \nprop\n with value \nval\n in graph \ng\n, vertex \nv\n, or edge \ne\n (optionally referenced by source vertex \ns\n and destination vertex \nd\n).\n\n\nsource\n\n\n#\n\n\nMetaGraphs.set_props!\n \n \nMethod\n.\n\n\nset_props!(g, dict)\nset_props!(g, v, dict)\nset_props!(g, e, dict)\nset_props!(g, s, d, dict)\n\n\n\n\nBulk set (merge) properties contained in \ndict\n with graph \ng\n, vertex \nv\n, or edge \ne\n (optionally referenced by source vertex \ns\n and destination vertex \nd\n).\n\n\nsource\n\n\n#\n\n\nMetaGraphs.weightfield!\n \n \nMethod\n.\n\n\nweightfield!(g, prop)\n\n\n\n\nSet the field that contains weight information to \nprop\n.\n\n\nsource\n\n\n#\n\n\nMetaGraphs.weightfield\n \n \nMethod\n.\n\n\nweightfield(g)\n\n\n\n\nReturn the field that contains weight information for metagraph \ng\n.\n\n\nsource", 
            "title": "MetaGraphs"
        }, 
        {
            "location": "/metagraphs/#metagraphs", 
            "text": "Metadata for graphs is stored as a series of named key-value pairs, with the key being an instance of type  Symbol  and the value being any type. The following methods are available for MetaGraphs:  #  MetaGraphs.clear_props!     Method .  clear_props!(g)\nclear_props!(g, v)\nclear_props!(g, e)\nclear_props!(g, s, d)  Remove all defined properties from graph  g , vertex  v , or edge  e  (optionally referenced by source vertex  s  and destination vertex  d ).  source  #  MetaGraphs.defaultweight!     Method .  defaultweight!(g, weight)  Set the default weight for metagraph  g  source  #  MetaGraphs.defaultweight     Method .  defaultweight(g)  Return the default weight for metagraph  g .  source  #  MetaGraphs.filter_edges     Method .  filter_edges(g, prop[, val])\nfilter_edges(g, fn)  Return an iterator to all edges that have property  prop  defined (optionally as  val , or where function  fn  returns  true  only for edges that should be included in the iterator).  fn  should be of the form  fn(g::AbstractMetaGraph, e::AbstractEdge)::Boolean  where  e  is replaced with the edge being evaluated.  source  #  MetaGraphs.filter_vertices     Method .  filter_vertices(g, prop[, val])\nfilter_vertices(g, fn)  Return an iterator to all vertices that have property  prop  defined (optionally as  val , or where function  fn  returns  true  only for vertices that should be included in the iterator).  fn  should be of the form  fn(g::AbstractMetaGraph, v::Integer)::Boolean  where  v  is replaced with the vertex being evaluated.  source  #  MetaGraphs.get_prop     Method .  get_prop(g, prop)\nget_prop(g, v, prop)\nget_prop(g, e, prop)\nget_prop(g, s, d, prop)  Return the property  prop  defined for graph  g , vertex  v , or edge  e  (optionally referenced by source vertex  s  and destination vertex  d ). If property is not defined, return an error.  source  #  MetaGraphs.has_prop     Method .  has_prop(g, prop)\nhas_prop(g, v, prop)\nhas_prop(g, e, prop)\nhas_prop(g, s, d, prop)  Return true if the property  prop  is defined for graph  g , vertex  v , or edge  e  (optionally referenced by source vertex  s  and destination vertex  d ).  source  #  MetaGraphs.props     Method .  props(g)\nprops(g, v)\nprops(g, e)\nprops(g, s, d)  Return a dictionary of all metadata from graph  g , vertex  v , or edge  e  (optionally referenced by source vertex  s  and destination vertex  d ).  source  #  MetaGraphs.rem_prop!     Method .  rem_prop!(g, prop)\nrem_prop!(g, v, prop)\nrem_prop!(g, e, prop)\nrem_prop!(g, s, d, prop)  Remove property  prop  from graph  g , vertex  v , or edge  e  (optionally referenced by source vertex  s  and destination vertex  d ). If property does not exist, will not do anything.  source  #  MetaGraphs.set_prop!     Method .  set_prop!(g, prop, val)\nset_prop!(g, v, prop, val)\nset_prop!(g, e, prop, val)\nset_prop!(g, s, d, prop, val)  Set (replace) property  prop  with value  val  in graph  g , vertex  v , or edge  e  (optionally referenced by source vertex  s  and destination vertex  d ).  source  #  MetaGraphs.set_props!     Method .  set_props!(g, dict)\nset_props!(g, v, dict)\nset_props!(g, e, dict)\nset_props!(g, s, d, dict)  Bulk set (merge) properties contained in  dict  with graph  g , vertex  v , or edge  e  (optionally referenced by source vertex  s  and destination vertex  d ).  source  #  MetaGraphs.weightfield!     Method .  weightfield!(g, prop)  Set the field that contains weight information to  prop .  source  #  MetaGraphs.weightfield     Method .  weightfield(g)  Return the field that contains weight information for metagraph  g .  source", 
            "title": "MetaGraphs"
        }, 
        {
            "location": "/license/", 
            "text": "The MetaGraphs.jl package is licensed under the MIT \"Expat\" License:\n\n\n\n\nCopyright (c) 2017: Seth Bromberger.\n\n\nPermission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:\n\n\nThe above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.\n\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.", 
            "title": "License"
        }
    ]
}